---
title: "Coder Upgrade 2025: Cell Cell interaction analysis"
author: "Matt Cannon and Xin Wang"
date: "`r format(Sys.time(), '%m/%d/%Y')`"
output:
    html_document:
        toc: true
        toc_float: true
        toc_depth: 5
        number_sections: false
        code-fold: true
        code-link: true
        df-print: kable
        embed-resources: true
        self_contained: true
knitr:
    opts_chunk:
        cache.lazy: false
        warning: false
        message: false
---

Load libraries
```{r libraries, cache=FALSE, warning=FALSE, error=FALSE, message=FALSE}
library(rrrSingleCellUtils)
library(tidyverse)
library(Seurat)
library(nichenetr)
library(DESeq2)
```

--------------------------------------------------------------------------------

# Overview


## What is the goal of cell-cell interaction analysis?

## What are common tools used to do this?

Nichenetr
Cellchat
CellphoneDB

## Get data to work with

Lets use the mouse brain data

```{r}
brain_data <-
    qs::qread("output/rdata_premade/brain_scRNA_combined.qs")

brain_data$age <-
    if_else(
        grepl("OX", brain_data$orig.ident),
        "Old",
        "Young"
    )

DimPlot(
    brain_data,
    group.by = "cell_type",
    label = TRUE,
    label.box = TRUE,
    repel = TRUE
) +
    NoLegend()

DimPlot(
    brain_data,
    group.by = "age",
    label = TRUE,
    label.box = TRUE,
    repel = TRUE
) +
    NoLegend()
```

## Find which cells change
```{r}
min_cells <- 200

cell_type_counts <-
    table(brain_data$cell_type) %>%
    as.list()

keep_cell_types <-
    cell_type_counts[cell_type_counts > min_cells] %>%
    names()

de_list <-
    parallel::mclapply(
        keep_cell_types,
        mc.cores = 5,
        mc.preschedule = FALSE,
        function(this_cell_type) {
            sub_data <- subset(brain_data, cell_type == this_cell_type)

            pseudobulked_data <-
                sub_data %>%
                AggregateExpression(
                    group.by = "orig.ident",
                    slot = "counts"
                ) %>%
                as.data.frame()

            design <-
                data.frame(
                    condition = colnames(pseudobulked_data) %>%
                        str_remove(".+\\.") %>%
                        str_remove("X.+") %>%
                        as.factor(),
                    row.names = colnames(pseudobulked_data)
                )

            de_res <-
                DESeqDataSetFromMatrix(
                    countData = pseudobulked_data,
                    colData = design,
                    design = ~condition
                ) %>%
                DESeq(quiet = TRUE) %>%
                results(contrast = c("condition", "O", "Y")) %>%
                as.data.frame() %>%
                rownames_to_column("gene") %>%
                arrange(padj) %>%
                as_tibble()
            return(de_res)
        }
    )
names(de_list) <- keep_cell_types
```

## Look at cell type counts and which ones change most
```{r cell_cell_top_cells}
# Lets count how many cells are in each cell type
table(brain_data$cell_type, brain_data$age) %>%
    as.data.frame() %>%
    filter(Var1 %in% keep_cell_types) %>%
    dplyr::rename(cell_type = Var1) %>%
    pivot_wider(
        names_from = "Var2",
        values_from = "Freq"
    ) %>%
    arrange(Young)

# Lets look at how many DE genes we had per cell type
lapply(de_list, function(x) {
    filter(x, padj <= 0.05) %>%
        nrow()
}) %>%
    unlist() %>%
    sort()

most_diff_cell_type <-
    lapply(de_list, function(x) {
        filter(x, padj <= 0.05) %>%
            nrow()
    }) %>%
    unlist() %>%
    sort() %>%
    tail(n = 1) %>%
    names()

most_diff_cell_type

# We'll use this for activities
second_diff_cell_type <-
    lapply(de_list, function(x) {
        filter(x, padj <= 0.05) %>%
            nrow()
    }) %>%
    unlist() %>%
    sort() %>%
    tail(n = 2) %>%
    head(n = 1) %>%
    names()

second_diff_cell_type
# vascular leptomeningeal cells

de_list[[most_diff_cell_type]] %>%
    ggplot(
        aes(
            x = log2FoldChange,
            y = -log10(pvalue),
            color = padj <= 0.05
        )
    ) +
    geom_point(alpha = 0.9) +
    ggrepel::geom_text_repel(
        data = de_list[[most_diff_cell_type]] %>%
            filter(padj <= 0.001) %>%
            arrange(desc(abs(log2FoldChange))) %>%
            head(n = 50),
        aes(label = gene), color = "black"
    )
```

## Nichenetr

Nichenetr relies on a pre-defined model of ligand - target interactions
It applies this model to your data to identify possible interactions

## Original method

## Get their pre-defined model data

if you have human data get:
- "https://zenodo.org/record/7074291/files/lr_network_human_21122021.rds"
- "https://zenodo.org/record/7074291/files/ligand_target_matrix_nsga2r_final.rds"
- "https://zenodo.org/record/7074291/files/weighted_networks_nsga2r_final.rds"

if you have mouse data get:
- "https://zenodo.org/record/7074291/files/lr_network_mouse_21122021.rds"
- "https://zenodo.org/record/7074291/files/ligand_target_matrix_nsga2r_final_mouse.rds"
- "https://zenodo.org/record/7074291/files/weighted_networks_nsga2r_final_mouse.rds"

I already downloaded these for us
```{r}
ligand_target_matrix <-
    readRDS("input/nichenetr/ligand_target_matrix_mouse.rds")

lr_network <-
    readRDS("input/nichenetr/lr_network_mouse.rds")

lr_network_strict <-
    lr_network %>%
    dplyr::filter(
        database != "ppi_prediction_go" &
            database != "ppi_prediction"
    )

weighted_networks <-
    readRDS("input/nichenetr/weighted_networks_mouse.rds")

weighted_networks_lr <-
    weighted_networks$lr_sig %>%
    inner_join(lr_network_strict %>% distinct(from, to),
        by = c("from", "to")
    )
```

## Define sender and reciever cells
Also get lists of genes expressed in receiver cells
```{r}
Idents(brain_data) <- brain_data$cell_type
## receiver
receiver <- most_diff_cell_type
expressed_genes_receiver <-
    get_expressed_genes(
        receiver,
        brain_data,
        pct = 0.10
    )

background_expressed_genes <-
    expressed_genes_receiver %>%
    .[. %in% rownames(ligand_target_matrix)]

## sender
sender_celltypes <-
    discard(keep_cell_types, keep_cell_types %in% most_diff_cell_type)
```

## Make sure to keep only genes present in our model
```{r}
expressed_genes_sender <-
    sender_celltypes %>%
    # lapply to get expressed genes of every sender cell type separately here
    lapply(get_expressed_genes, brain_data, 0.10) %>%
    unlist() %>%
    unique()
```

## Define our genes of interest
Taking significant genes that change at least 2 fold
```{r}
geneset_oi <-
    de_list[[most_diff_cell_type]] %>%
    filter(
        padj <= 0.05 &
            abs(log2FoldChange) >= 1
    ) %>%
    pull(gene) %>%
    .[. %in% rownames(ligand_target_matrix)]

geneset_oi %>% sort()
```

## Define potential ligands
Take the list of ligands from our model and keep the ones that are expressed in our data and do the same for the receptors
Then use these lists to keep ligands where both the receptor and the ligand are expressed
```{r}
ligands <-
    lr_network_strict %>%
    pull(from) %>%
    unique()

receptors <-
    lr_network_strict %>%
    pull(to) %>%
    unique()

expressed_ligands <- intersect(ligands, expressed_genes_sender)
expressed_receptors <- intersect(receptors, expressed_genes_receiver)

potential_ligands <-
    lr_network_strict %>%
    filter(
        from %in% expressed_ligands &
            to %in% expressed_receptors
    ) %>%
    pull(from) %>%
    unique()
```

## Predict which ligands best explain the expressed genes in the reciever cells
We provide:

- geneset_oi                    - List of downstream targets of potentially activated receptors
- background_expressed_genes    - List of genes expressed in the reciever cells
- ligand_target_matrix          - Matrix of ligand-receptor interactions
- potential_ligands             - List of ligands that are expressed in the sender cells

How you generate these lists is flexible

```{r}
nichenet_stepwise_output <-
    predict_ligand_activities(
        geneset = geneset_oi,
        background_expressed_genes = background_expressed_genes,
        ligand_target_matrix = ligand_target_matrix,
        potential_ligands = potential_ligands
    ) %>%
    arrange(-aupr_corrected) %>%
    mutate(rank = rank(-aupr_corrected))

hist(nichenet_stepwise_output$aupr_corrected, n = 100)

print(nichenet_stepwise_output, n = 20)
# let's keep the top 10

qs::qsave(
    nichenet_stepwise_output,
    file = "output/nichenetr/nichenet_stepwise_output.qs"
)
```

--------------------------------------------------------------------------------

# Activity 1

We need:

- geneset_oi                    - List of downstream targets of potentially activated receptors
- background_expressed_genes    - List of genes expressed in the reciever cells
- ligand_target_matrix          - Matrix of ligand-receptor interactions
- potential_ligands             - List of ligands that are expressed in the sender cells

## Use the brain_data that we've been using

For the activity, repeat what I did above but use the second_diff_cell_type cell type

Don't re-use variable names for outputs so our original data is not overwritten

## Define receiver cell type and genes expressed by receiver cell type
```{r}

```

## Define background expressed genes
```{r}

```

## Define sender cells and genes expressed by sender cell types
```{r}

```

## Define geneset of interest
```{r}

```

## Get potential ligands and receptors
```{r}

```

## Run NicheNet stepwise analysis
```{r}

```

--------------------------------------------------------------------------------

# Visualizing nichenetr results

```{r}
## Ligand predicted based on DEG
potential_ligands <-
    nichenet_stepwise_output %>%
    pull(test_ligand)

# Select the top 10 ligands
ligands_top10 <- potential_ligands[1:10]
```

## Let's make a heatmap of ligand regulatory potential
```{r}
active_ligand_target_links_df <-
    ligands_top10 %>%
    lapply(
        get_weighted_ligand_target_links,
        geneset = geneset_oi,
        ligand_target_matrix = ligand_target_matrix,
        n = 100
    ) %>%
    bind_rows() %>%
    drop_na()

active_ligand_target_links <-
    prepare_ligand_target_visualization(
        ligand_target_df = active_ligand_target_links_df,
        ligand_target_matrix = ligand_target_matrix
    )

order_ligands <-
    intersect(ligands_top10, colnames(active_ligand_target_links)) %>%
    rev()

order_targets <-
    active_ligand_target_links_df$target %>%
    unique() %>%
    intersect(rownames(active_ligand_target_links))

vis_ligand_target <- t(active_ligand_target_links[order_targets, order_ligands])

ligand_target_heatmap <-
    make_heatmap_ggplot(
        vis_ligand_target,
        "Prioritized ligands",
        "Predicted target genes",
        legend_title = "Regulatory potential"
    ) +
    scale_fill_gradient2(low = "whitesmoke", high = "purple") +
    coord_fixed() +
    theme_bw()

ggsave(
    "output/figures/nn_ligand_target_heatmap.png",
    plot = ligand_target_heatmap,
    width = 10,
    height = 10
)
```

## Ligand - receptor plot
```{r}
ligand_receptor_links_df <-
    get_weighted_ligand_receptor_links(
        ligands_top10,
        expressed_receptors,
        lr_network_strict,
        weighted_networks$lr_sig
    )

vis_ligand_receptor_network <-
    prepare_ligand_receptor_visualization(
        ligand_receptor_links_df,
        order_hclust = "both"
    )

ligand_receptor_heatmap <-
    make_heatmap_ggplot(
        t(vis_ligand_receptor_network),
        y_name = "Ligands",
        x_name = "Receptors",
        legend_title = "Prior interaction potential"
    ) +
    scale_fill_gradient2(low = "whitesmoke", high = "mediumvioletred") +
    labs(fill = "Prior interaction\npotential") +
    theme_bw() +
    theme(
        axis.text.x = element_text(angle = 90, hjust = 0),
        legend.position = "top"
    )

ggsave(
    "output/figures/nn_ligand_receptor_heatmap.png",
    plot = ligand_receptor_heatmap,
    width = 10,
    height = 10
)
```

## Make dotplots of expression of ligands in sender cell types
```{r}
sender_dotplot <-
    brain_data %>%
    subset(cell_type %in% sender_celltypes) %>%
    DotPlot(
        features = colnames(vis_ligand_receptor_network),
        scale = FALSE
    ) +
    coord_flip() +
    labs(
        x = NULL,
        y = NULL
    ) +
    theme(
        axis.text.x = element_text(angle = 90, vjust = 0.5)
    )

receiver_dotplot <-
    brain_data %>%
    subset(cell_type %in% receiver) %>%
    DotPlot(
        features = rownames(vis_ligand_receptor_network),
        scale = FALSE,
        group.by = "age"
    ) +
    labs(title = receiver) +
    theme(
        axis.text.x = element_text(angle = 90, vjust = 0.5),
        legend.position = "bottom"
    )
```

## Assemble
```{r}
combined_heatmaps <-
    ligand_receptor_heatmap +
    sender_dotplot +
    receiver_dotplot +
    patchwork::plot_layout(
        axes = "collect",
        ncol = 2,
        widths = c(2, 1),
        heights = c(2, 1)
    )

ggsave(
    "output/figures/nn_combined_heatmap_dots.png",
    width = 10,
    height = 8
)
```


# Activity 2
Make plots from your nichenetr output


## Get top ligands
```{r}

```

## Make a heatmap of ligand regulatory potential
```{r}

```

## Ligand - receptor plot
```{r}

```

## Make dotplots of expression of ligands in sender cell types
```{r}

```

## Assemble
```{r}

```

# Section 3: Interpreting nichenetr results

## Stepwise output

The output from predict_ligand_activities() is a tibble with the following columns:

- $test_ligand      - Ligand that was tested
- $auroc            - Area under the ROC curve
- $aupr             - Area under the precision-recall curve
- $pearson          - Pearson correlation between predicted effects of ligand activity and observed gene expression

Don't be dismayed if your pearson correlation coefficients are low, that's normal

Nichenetr doesn't return p-values because it's not a statistical test, it's a ranking method

Nichenetr generally provides a jumping off point for further analysis

From here, you'll want to look at the top ligands and their targets, then confirm that the ligands are expressed in the sender cells and the targets are expressed in the receiver cells

```{r}
nichenet_stepwise_output
```


## Easy mode

This will work if you are comparing between two conditions such as treated/untreated

You have little control over what's happening in the analysis
```{r}
nichenet_easy_output <-
    nichenet_seuratobj_aggregate(
        seurat_obj = brain_data, # Your Seurat object
        receiver = most_diff_cell_type, # String of one cell type
        condition_colname = "age", # Column name to split data by
        condition_oi = "Old", # One group
        condition_reference = "Young", # Your other group
        sender = sender_celltypes, # Vector of strings for cell types
        ligand_target_matrix = ligand_target_matrix, # From above
        lr_network = lr_network, # From above
        weighted_networks = weighted_networks # From above
    )

qs::qsave(nichenet_easy_output,
    file = paste0(data_path, "nichenet_easy_output.qs")
)
```

## Easy mode output:
Output is a named list:
- Important outputs
    - $ligand_activities: data frame with output ligand activity analysis
    - $top_ligands: top_n ligands based on ligand activity
    - $top_targets: active, affected target genes of these ligands
    - $top_receptors: receptors of these ligands
    - $ligand_target_heatmap: heatmap of ligand-target regulatory potential
    - $ligand_target_df: data frame showing regulatory potential scores of predicted active ligand-target network
    - $ligand_activity_target_heatmap: heatmap showing both ligand activity scores and target genes of these top ligands
    - $ligand_expression_dotplot: expression dotplot of the top ligands
    - $ligand_differential_expression_heatmap: differential expression heatmap of the top ligands
    - $ligand_receptor_matrix: matrix of ligand-receptor interactions
    - $ligand_receptor_heatmap: heatmap showing ligand-receptor interactions
    - $ligand_receptor_df: data frame of ligand-receptor interactions
- Input
    - $ligand_target_matrix: matrix indicating regulatory potential scores between active ligands and their predicted targets
    - $geneset_oi: a vector containing the set of genes used as input for the ligand activity analysis
    - $background_expressed_genes: the background of genes to which the geneset will be compared in the ligand activity analysis.

## Where to go from here?

From this point, you can take your results and try to apply them to your biological question. Look at the ligands and receptors that that are predicted to be important players in your system and see if they make sense. If they do, you can try to validate them experimentally. If they don't, you can try to figure out why. Maybe you're missing some data, maybe you need to do some more analysis, maybe you need to try a different method.

This sort of analysis should be viewed as a jumping off point for further analysis and experiments, not a definitive answer to your question.

# Resources

https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9184522/
https://www.nature.com/articles/s41592-019-0667-5
https://github.com/saeyslab/nichenetr


