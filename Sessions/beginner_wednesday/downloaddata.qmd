

# Downloading data
---
title: "Creating additional Seurat Objects"
output: html_notebook
---

```{r library_to_download}
# Load necessary packages
library(Seurat)
library(tidyverse) # This package contains ggplot2 and dplyr
library(patchwork)
library(ggplot2) # For plotting
library(rrrSingleCellUtils) # For plotting an processing
library(qs) # For reading and writing .qs files
library(SingleR) # For cell type annotation
library(biomaRt) # For gene annotation
library(harmony) # For harmony
library(anndata)
# Set the random generator seed so that results are reproducible.
set.seed(132)

```

# 4 h5ad datasets were downloaded from 
https://allen-brain-cell-atlas.s3.us-west-2.amazonaws.com/index.html#expression_matrices/WMB-10Xv2/20230630/. 
#TH - thalamus, MB - midbrain, CTXsp - cortical subplate, HY - hypothalamus. 

```{bash}
link_base=https://allen-brain-cell-atlas.s3-us-west-2.amazonaws.com/expression_matrices/WMB-10Xv2/20230630/

for get_file in WMB-10Xv2-CTXsp-raw.h5ad \
                WMB-10Xv2-MB-raw.h5ad \
                WMB-10Xv2-HY-raw.h5ad \
                WMB-10Xv2-TH-raw.h5ad
do
    echo ${get_file}
    wget \
        -O input/scRNA/${get_file} \
        "${link_base}${get_file}"
done
```


## Create Seurat objects from the h5ad data. Preprocess each of the objects and downsample them. Each of the object is filtered using different filtering cutoffs. 

# Process CTXsp object
```{r}
data_names <- c("CTXsp", "HY", "MB", "TH")

mart <- useDataset("mmusculus_gene_ensembl", useMart("ensembl"))

n_cells <- 2500

sobj_list <-
    parallel::mclapply(
        data_names,
        mc.cores = 1,
        mc.preschedule = FALSE,
        function(dataset) {
            raw_data <-
                read_h5ad(paste0(
                    "input/scRNA/WMB-10Xv2-",
                    dataset,
                    "-raw.h5ad"
                ))

            # Randomly downsample to 2500 cells
            set.seed(1337)
            raw_data <-
                raw_data[sample(
                    1:nrow(raw_data),
                    min(n_cells, nrow(raw_data))
                ), ]

            old_genenames <- colnames(raw_data)

            gene_symbol <-
                biomaRt::getBM(
                    attributes = c("ensembl_gene_id", "mgi_symbol"),
                    filters = "ensembl_gene_id",
                    values = old_genenames,
                    mart = mart
                ) %>%
                dplyr::filter(mgi_symbol != "") %>%
                group_by(mgi_symbol) %>%
                slice_head(n = 1) %>%
                ungroup() %>%
                pull(mgi_symbol, name = ensembl_gene_id)

            matrix_new <-
                raw_data[, colnames(raw_data) %in% names(gene_symbol)]

            colnames(matrix_new) <-
                gene_symbol[colnames(matrix_new)] %>%
                as.vector()

            s_obj <-
                CreateSeuratObject(
                    counts = t(as.matrix(matrix_new)),
                    meta.data = raw_data$obs,
                    min.features = 200,
                    min.cells = 3,
                    project = dataset
                ) %>%
                PercentageFeatureSet(
                    pattern = "^mt",
                    col.name = "percent.mt"
                ) %>%
                subset(
                    subset = nFeature_RNA > 500 &
                        nCount_RNA < 25000 &
                        percent.mt < 5
                ) %>%
                NormalizeData() %>%
                FindVariableFeatures() %>%
                ScaleData(features = rownames(.)) %>%
                RunPCA() %>%
                FindNeighbors(dims = 1:10) %>%
                FindClusters(resolution = 0.1) %>%
                RunUMAP(dims = 1:10)

            return(s_obj)
    })

```

```{r}
# check the object
combine_obj <-
    merge(x = sobj_list[[1]],
          y = sobj_list[-1],
          add.cell.ids = c("obj1", "obj2", "obj3", "obj4"),
          project = "combined") %>%
    JoinLayers() %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA() %>%
    RunUMAP(dims = 1:20) %>%
    FindNeighbors() %>%
    FindClusters()

rm(sobj_list)

# run harmony, you can run hrmony now or after annotation
combine_obj <-
    RunHarmony(combine_obj, group.by.vars = "orig.ident") %>%
    RunUMAP(reduction = "harmony", dims = 1:20) %>%
    FindNeighbors(reduction = "harmony", dims = 1:20) %>%
    FindClusters()

# reference data
brain_ref_data <-
    qs::qread("~/data/output/rdata_premade/mouse_brain_ref_data.qs")

# singleR annotation
annotation <-
    SingleR(
        test = as.SingleCellExperiment(combine_obj),
        ref = GetAssayData(brain_ref_data),
        labels = brain_ref_data$cell_type,
        aggr.ref = TRUE
    )

rm(brain_ref_data)

# check the object
combine_obj$SingleR_annotation <- annotation$labels
 
# cell scores
combine_obj$SingleR_scores <-
    apply(X = annotation$scores,
          MARGIN = 1,
          function(x) max(x, na.rm = TRUE))

DimPlot(combine_obj,
        group.by = "SingleR_annotation",
        label = TRUE,
        label.box = T) +
    NoLegend() 

qs::qsave(combine_obj, "input/scRNA/allen_brain_data.qs")
```

```{bash}
rm input/scRNA/WMB-10Xv2-*-raw.h5ad
```